# Pull the Steinbock image
docker pull ghcr.io/bodenmillergroup/steinbock:0.16.3-cellpose

# Check Steinbock version
docker run -v "C:\Users\User\OneDrive\Desktop\R:/data" ^
  -p 8888:8888 ^
  ghcr.io/bodenmillergroup/steinbock:0.16.3-cellpose ^
  --version

# Preprocessing
docker run -v "C:\Users\User\OneDrive\Desktop\R:/data" ^
  -p 8888:8888 ^
  ghcr.io/bodenmillergroup/steinbock:0.16.3-cellpose ^
  preprocess external images

# Segmentation
docker run -v "C:\Users\User\OneDrive\Desktop\R:/data" ^
  -p 8888:8888 ^
  ghcr.io/bodenmillergroup/steinbock:0.16.3-cellpose ^
  segment cellpose

# Measure Intensities
docker run -v "C:\Users\User\OneDrive\Desktop\R:/data" ^
  -p 8888:8888 ^
  ghcr.io/bodenmillergroup/steinbock:0.16.3-cellpose ^
  measure intensities

# Measure Region Properties
docker run -v "C:\Users\User\OneDrive\Desktop\R:/data" ^
  -p 8888:8888 ^
  ghcr.io/bodenmillergroup/steinbock:0.16.3-cellpose ^
  measure regionprops

# Measure Neighbors
docker run -v "C:\Users\User\OneDrive\Desktop\R:/data" ^
  -p 8888:8888 ^
  ghcr.io/bodenmillergroup/steinbock:0.16.3-cellpose ^
  measure neighbors --type centroids --dmax 15 --kmax 10

# Export to OME
docker run -v "C:\Users\User\OneDrive\Desktop\R:/data" ^
  -p 8888:8888 ^
  ghcr.io/bodenmillergroup/steinbock:0.16.3-cellpose ^
  export ome

# Export to CSV
docker run -v "C:\Users\User\OneDrive\Desktop\R:/data" ^
  -p 8888:8888 ^
  ghcr.io/bodenmillergroup/steinbock:0.16.3-cellpose ^
  export csv intensities regionprops -o objects.csv

# Export to FCS
docker run -v "C:\Users\User\OneDrive\Desktop\R:/data" ^
  -p 8888:8888 ^
  ghcr.io/bodenmillergroup/steinbock:0.16.3-cellpose ^
  export fcs intensities regionprops -o objects.fcs

# Export to AnnData
docker run -v "C:\Users\User\OneDrive\Desktop\R:/data" ^
  -p 8888:8888 ^
  ghcr.io/bodenmillergroup/steinbock:0.16.3-cellpose ^
  export anndata --intensities intensities --data regionprops --neighbors neighbors -o objects.h5ad

# Export Graphs
docker run -v "C:\Users\User\OneDrive\Desktop\R:/data" ^
  -p 8888:8888 ^
  ghcr.io/bodenmillergroup/steinbock:0.16.3-cellpose ^
  export graphs --data intensities


/**
 * This script provides a general template for cell detection using StarDist in QuPath.
 * This example assumes you have fluorescence image, which has a channel called 'DAPI' 
 * showing nuclei.
 * 
 * If you use this in published work, please remember to cite *both*:
 *  - the original StarDist paper (https://doi.org/10.48550/arXiv.1806.03535)
 *  - the original QuPath paper (https://doi.org/10.1038/s41598-017-17204-5)
 *  
 * There are lots of options to customize the detection - this script shows some 
 * of the main ones. Check out other scripts and the QuPath docs for more info.
 */

import qupath.ext.stardist.StarDist2D
import qupath.lib.scripting.QP

// IMPORTANT! Replace this with the path to your StarDist model
// that takes a single channel as input (e.g. dsb2018_heavy_augment.pb)
// You can find some at https://github.com/qupath/models
// (Check credit & reuse info before downloading)
def modelPath = "C:/Users/User/Downloads/dsb2018_heavy_augment.pb"

// Customize how the StarDist detection should be applied
// Here some reasonable default options are specified
def stardist = StarDist2D
    .builder(modelPath)
    .channels('1_Hoechst')            // Extract channel called 'DAPI'
    .normalizePercentiles(1, 99) // Percentile normalization
    .threshold(0.5)              // Probability (detection) threshold
    .pixelSize(0.5)              // Resolution for detection
    .cellExpansion(5)            // Expand nuclei to approximate cell boundaries
    .measureShape()              // Add shape measurements
    .measureIntensity()          // Add cell measurements (in all compartments)
    .build()
	
// Define which objects will be used as the 'parents' for detection
// Use QP.getAnnotationObjects() if you want to use all annotations, rather than selected objects
def pathObjects = QP.getSelectedObjects()

// Run detection for the selected objects
def imageData = QP.getCurrentImageData()
if (pathObjects.isEmpty()) {
    QP.getLogger().error("No parent objects are selected!")
    return
}
stardist.detectObjects(imageData, pathObjects)
stardist.close() // This can help clean up & regain memory
println('Done!')
